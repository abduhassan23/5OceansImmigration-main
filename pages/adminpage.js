import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { onAuthStateChanged } from 'firebase/auth';
import { auth, storage } from '@/app/firebase/config';
import { ref, getDownloadURL } from 'firebase/storage';
import MainLayout from '../app/mainlayout';

const AdminPage = () => {
  const [loading, setLoading] = useState(true);
  const [isAdmin, setIsAdmin] = useState(false);
  const [users, setUsers] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [fileUrls, setFileUrls] = useState({});
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);

  const router = useRouter();

  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') {
      setIsDarkMode(true);
      document.documentElement.classList.add('dark');
    } else {
      setIsDarkMode(false);
      document.documentElement.classList.remove('dark');
    }
  }, []);

  useEffect(() => {
    const checkAdminStatus = async () => {
      onAuthStateChanged(auth, async (user) => {
        if (user) {
          try {
            const res = await fetch(`/api/Users?email=${user.email}`);
            const data = await res.json();

            if (data.isAdmin) {
              setIsAdmin(true);
              await fetchUsersWithFiles(currentPage, searchQuery);
            } else {
              router.push('/');
            }
          } catch (error) {
            console.error('Error checking admin status:', error);
            router.push('/');
          }
        } else {
          router.push('/');
        }
        setLoading(false);
      });
    };

    checkAdminStatus();
  }, [router, currentPage, searchQuery]);

  const fetchUsersWithFiles = async (page, query) => {
    try {
      const response = await fetch(`/api/UsersWithFiles?page=${page}&limit=5&query=${query}`);
      const usersData = await response.json();
      setUsers(usersData.users);
      setTotalPages(usersData.totalPages);

      const urls = {};
      const promises = usersData.users.flatMap(user =>
        user.files.map(async (file) => {
          const fileRef = ref(storage, `users/${user.firebaseUID}/uploads/${file.fileHash}`);
          try {
            const url = await getDownloadURL(fileRef);
            urls[file.fileHash] = url;
          } catch (error) {
            console.error('Error fetching download URL:', error);
          }
        })
      );
      await Promise.all(promises);
      setFileUrls(urls);
    } catch (error) {
      console.error('Error fetching users and files:', error);
    }
  };

  const handleSearchChange = (e) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1); 
  };

  //Methods to handle swapping the current page state based on the current page and total page states (Next page and previous page)
  const handleNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage(prevPage => prevPage + 1);
    }
  };

  const handlePreviousPage = () => {
    if (currentPage > 1) {
      setCurrentPage(prevPage => prevPage - 1);
    }
  };

  // Function to handle updating the file status with an optional note
  // Line 108 - 113 were generated by Chat GPT with the Prompt: 
  // "Please help me complete this updateFileStatus method to handle mapping 
  // over users and their files, updating the status of a file by its fileHash."
  const updateFileStatus = async (fileHash, status, note = '') => {
    try {
      setUsers((prevUsers) =>
        prevUsers.map((user) => ({
          ...user,
          files: user.files.map((file) =>
            file.fileHash === fileHash ? { ...file, status } : file
          ),
        }))
      );
  
      // Send the update request to the backend
      const response = await fetch('/api/FIles', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          fileHash,
          status,
          note, // Include the note in the request
        }),
      });
  
      const data = await response.json();
      if (data.status !== 200) {
        console.error('Failed to update file status:', data.message);
      }
    } catch (error) {
      console.error('Error updating file status:', error);
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  if (!isAdmin) {
    return null;
  }

  return (
    <MainLayout>
      <div className={`p-8 min-h-screen ${isDarkMode ? 'bg-gray-900 text-white' : 'bg-white text-black'}`}>
        <div className="flex justify-between items-center">
          <h1 className="text-3xl font-bold mb-4">User Files</h1>
        </div>

        <p className='text-2xl'>User Files Admin Page (Open generic file names with Microsoft Word)</p>

        <div className="my-4">
          <input
            type="text"
            placeholder="Search for Users by name or email"
            value={searchQuery}
            onChange={handleSearchChange}
            className="px-4 py-2 border dark:border-gray-600 rounded-md w-full dark:bg-gray-800 dark:text-white"
          />
        </div>

        <ul className="space-y-4">
          {users.map((user) => (
            <li key={user.id} className="border p-4 rounded-md shadow-sm dark:bg-gray-800 dark:border-gray-600">
              <h2 className="text-lg font-semibold dark:text-white">
                {user.name} ({user.email})
              </h2>
              <ul className="mt-2 space-y-2">
                {user.files.length > 0 ? (
                  user.files.map((file) => (
                    <li key={file.fileHash} className="border-b pb-2 dark:border-gray-600">
                      <strong className="dark:text-gray-300">File Name:</strong>{' '}
                      <span className="dark:text-white">{file.name}</span> <br />
                      <strong className="dark:text-gray-300">Hash:</strong>{' '}
                      <span className="dark:text-white">{file.fileHash}</span> <br />
                      <strong className="dark:text-gray-300">Status:</strong>{' '}
                      <select
                        value={file.status}
                        onChange={(e) => {
                          const newStatus = e.target.value;
                          if (newStatus === 'reviewed') {
                            const note = prompt('Enter a note for the user (optional):');
                            updateFileStatus(file.fileHash, newStatus, note || '');
                          } else {
                            updateFileStatus(file.fileHash, newStatus);
                          }
                        }}
                        className="mt-2 px-4 py-2 border dark:border-gray-600 rounded-md dark:bg-gray-800 dark:text-white"
                      >
                        <option value="pending evaluation">Pending Evaluation</option>
                        <option value="reviewed">Reviewed</option>
                      </select> <br />
                      <a
                        href={fileUrls[file.fileHash] || '#'}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-blue-500 hover:underline dark:text-blue-300"
                      >
                        Download File
                      </a>
                    </li>
                  ))
                ) : (
                  <li className="dark:text-gray-400">No files available</li>
                )}
              </ul>
            </li>
          ))}
        </ul>

        {/* Page controls */}
        <div className="flex justify-between items-center mt-4">
          <button
            onClick={handlePreviousPage}
            disabled={currentPage === 1}
            className={`px-4 py-2 rounded-md ${isDarkMode ? 'bg-gray-700 text-white hover:bg-gray-600' : 'bg-gray-300 text-black hover:bg-gray-200'} disabled:opacity-50`}
          >
            Previous
          </button>
          <span className={`${isDarkMode ? 'text-white' : 'text-black'}`}>
            Page {currentPage} of {totalPages}
          </span>
          <button
            onClick={handleNextPage}
            disabled={currentPage === totalPages}
            className={`px-4 py-2 rounded-md ${isDarkMode ? 'bg-gray-700 text-white hover:bg-gray-600' : 'bg-gray-300 text-black hover:bg-gray-200'} disabled:opacity-50`}
          >
            Next
          </button>
        </div>
      </div>
    </MainLayout>
  );
};

export default AdminPage;
