import React, { useState, useEffect } from "react";
import {
  MessageCircle,
  ThumbsUp,
  Tag,
  Globe,
  Users,
  HelpCircle,
  Search,
  MoreHorizontal,
  Trash2,
  Flag,
  Sparkles,
} from "lucide-react";
import RootLayout from "@/app/mainlayout";
import { getAuth, onAuthStateChanged } from "firebase/auth";
import axios from "axios";
import Chatbot from "@/pages/chatbot";
import { format } from "date-fns";

const CommunityPage = () => {
  const [threads, setThreads] = useState([]);
  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");
  const [category, setCategory] = useState("general");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [userId, setUserId] = useState(null);
  const [commentTexts, setCommentTexts] = useState({});
  const [searchTerm, setSearchTerm] = useState("");
  const [dropdownVisible, setDropdownVisible] = useState(null);
  const [likedThreads, setLikedThreads] = useState({});
  const [isLiking, setIsLiking] = useState({});
  const [prompt, setPrompt] = useState(""); // State for AI prompt
  const [editingThreadId, setEditingThreadId] = useState(null);
  const [editedContent, setEditedContent] = useState("");

  useEffect(() => {
    const auth = getAuth();
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (user) {
        try {
          const userResponse = await axios.get(`/api/Users/email`, {
            params: { email: user.email },
          });
          if (!userResponse.data || !userResponse.data.userId) {
            throw new Error("Failed to get user ID from MongoDB.");
          }
          setUserId(userResponse.data.userId);
        } catch (err) {
          setError("Failed to fetch user information. Please try again.");
        }
      } else {
        setUserId(null);
      }
    });

    fetchThreads();

    const savedTheme = localStorage.getItem("theme");
    if (savedTheme === "dark") {
      setIsDarkMode(true);
      applyDarkTheme();
    } else {
      setIsDarkMode(false);
      applyLightTheme();
    }

    return () => unsubscribe();
  }, [userId]);

  const fetchThreads = async () => {
    setLoading(true);
    try {
      const res = await fetch(`/api/forum/threads`, {
        headers: {
          userId: userId,
        },
      });
      const data = await res.json();
      if (res.ok) {
        // Sort threads by the most recent `createdAt`
        setThreads(
          data.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
        );
        const likedStatus = {};
        data.forEach((thread) => {
          likedStatus[thread.id] = thread.userHasLiked;
        });
        setLikedThreads(likedStatus);
      } else {
        setError(data.error || "Unable to fetch threads");
      }
    } catch (err) {
      setError("Unable to fetch threads");
    } finally {
      setLoading(false);
    }
  };

  const applyDarkTheme = () => {
    document.documentElement.classList.add("dark");
  };

  const applyLightTheme = () => {
    document.documentElement.classList.remove("dark");
  };

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const handleSearchSubmit = (e) => {
    e.preventDefault();
    fetchThreads();
  };

  const handleAIGenerate = async () => {
    if (!prompt.trim()) return;

    setLoading(true);
    try {
      const response = await fetch("/api/generateContent", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ message: prompt }),
      });

      const data = await response.json();

      // Log the full response to understand the structure
      console.log("Full response from API:", data);

      if (data.reply) {
        // Attempt to split the response to populate title and content
        const lines = data.reply.split("\n");
        const generatedTitle = lines[0]; // First line for title
        const generatedContent = lines.slice(1).join("\n"); // Remaining lines for content

        setTitle(generatedTitle); // Set the title field
        setContent(generatedContent); // Set the content field
      } else {
        setError("No content generated by AI.");
      }
    } catch (error) {
      console.error("Error generating content:", error);
      setError("Failed to generate content");
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    if (!userId) {
      setError("You must be logged in to create a thread.");
      setLoading(false);
      return;
    }

    try {
      const res = await fetch("/api/forum/threads", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ title, content, category, userId }),
      });

      const newThread = await res.json();

      if (res.ok) {
        // Prepend the new thread to the top of the list
        setThreads([{ ...newThread }, ...threads]);

        setTitle("");
        setContent("");
        setCategory("general");

        window.scrollTo(0, 0);
      } else {
        setError(newThread.error || "Failed to create thread");
      }
    } catch (err) {
      setError("Error creating thread");
    } finally {
      setLoading(false);
    }
  };

  const handleLike = async (threadId) => {
    if (!userId) {
      setError("You must be logged in to like a thread.");
      return;
    }

    setIsLiking((prevState) => ({ ...prevState, [threadId]: true }));

    try {
      const res = await fetch("/api/forum/threads", {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ threadId, userId }),
      });

      const updatedThread = await res.json();
      if (res.ok) {
        setThreads(
          threads.map((thread) =>
            thread.id === threadId ? updatedThread : thread
          )
        );
        setLikedThreads((prevState) => ({
          ...prevState,
          [threadId]: !likedThreads[threadId],
        }));
      } else {
        setError(updatedThread.error || "Failed to like thread");
      }
    } catch (err) {
      setError("Error liking thread");
    } finally {
      setIsLiking((prevState) => ({ ...prevState, [threadId]: false }));
    }
  };

  const handleCommentTextChange = (e, threadId) => {
    setCommentTexts({ ...commentTexts, [threadId]: e.target.value });
  };

  const handleCommentSubmit = async (e, threadId) => {
    e.preventDefault();
    setLoading(true);

    try {
      const res = await fetch("/api/forum/posts", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          content: commentTexts[threadId],
          threadId,
          userId,
        }),
      });

      const newComment = await res.json();
      if (res.ok) {
        setThreads(
          threads.map((thread) =>
            thread.id === threadId
              ? { ...thread, posts: [newComment, ...thread.posts] }
              : thread
          )
        );
        setCommentTexts({ ...commentTexts, [threadId]: "" });
      } else {
        setError(newComment.error || "Failed to post comment");
      }
    } catch (err) {
      console.error("Error posting comment:", err);
      setError("Error posting comment");
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteThread = async (threadId) => {
    try {
      const res = await fetch("/api/forum/threads", {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ threadId, userId }),
      });

      if (!res.ok) {
        throw new Error("Failed to delete thread");
      }

      setThreads(threads.filter((thread) => thread.id !== threadId));
    } catch (err) {
      setError("Error deleting thread");
    }
  };

  const handleDeletePost = async (postId, threadId) => {
    try {
      const res = await fetch("/api/forum/posts", {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ postId, userId }),
      });

      if (!res.ok) {
        throw new Error("Failed to delete post");
      }

      setThreads(
        threads.map((thread) =>
          thread.id === threadId
            ? {
                ...thread,
                posts: thread.posts.filter((post) => post.id !== postId),
              }
            : thread
        )
      );
    } catch (err) {
      setError("Error deleting post");
    }
  };

  const handleEditSubmit = async (e, threadId) => {
    e.preventDefault();
    setLoading(true);

    try {
      const res = await fetch(`/api/forum/threads/${threadId}`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ content: editedContent, userId }),
      });

      const updatedThread = await res.json();
      if (res.ok) {
        setThreads(
          threads.map((thread) =>
            thread.id === threadId
              ? { ...thread, content: editedContent }
              : thread
          )
        );
        setEditingThreadId(null);
      } else {
        setError(updatedThread.error || "Failed to edit thread");
      }
    } catch (err) {
      console.error("Error editing thread:", err);
      setError("Error editing thread");
    } finally {
      setLoading(false);
    }
  };

  const toggleDropdown = (id) => {
    setDropdownVisible(dropdownVisible === id ? null : id);
  };

  return (
    <RootLayout>
      <div className="min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <h2 className="text-4xl font-bold text-center mb-12 text-gray-800 dark:text-gray-100">
            Immigration Community Forum
          </h2>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <div className="lg:col-start-3 lg:row-start-1 space-y-6 order-first lg:order-last">
              <div className="bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6">
                <h3 className="text-xl font-semibold text-blue-600 dark:text-blue-400 mb-4">
                  Categories
                </h3>
                <ul className="space-y-2">
                  <li>
                    <a
                      href="#"
                      className="flex items-center text-gray-600 dark:text-gray-300 hover:text-blue-500"
                    >
                      <Globe className="w-5 h-5 mr-2" /> General
                    </a>
                  </li>
                  <li>
                    <a
                      href="#"
                      className="flex items-center text-gray-600 dark:text-gray-300 hover:text-blue-500"
                    >
                      <Tag className="w-5 h-5 mr-2" /> Visas
                    </a>
                  </li>
                  <li>
                    <a
                      href="#"
                      className="flex items-center text-gray-600 dark:text-gray-300 hover:text-blue-500"
                    >
                      <Users className="w-5 h-5 mr-2" /> Jobs
                    </a>
                  </li>
                  <li>
                    <a
                      href="#"
                      className="flex items-center text-gray-600 dark:text-gray-300 hover:text-blue-500"
                    >
                      <HelpCircle className="w-5 h-5 mr-2" /> Permanent
                      Residency
                    </a>
                  </li>
                  <li>
                    <a
                      href="#"
                      className="flex items-center text-gray-600 dark:text-gray-300 hover:text-blue-500"
                    >
                      <Globe className="w-5 h-5 mr-2" /> Culture & Integration
                    </a>
                  </li>
                </ul>
              </div>
              <div className="bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6">
                <h3 className="text-xl font-semibold text-blue-600 dark:text-blue-400 mb-4">
                  Community Guidelines
                </h3>
                <ul className="list-disc list-inside text-gray-600 dark:text-gray-300 space-y-2">
                  <li>Be respectful and supportive</li>
                  <li>Share accurate information</li>
                  <li>Protect your personal information</li>
                  <li>Report inappropriate content</li>
                  <li>Stay on topic</li>
                </ul>
              </div>
            </div>
            <div className="lg:col-span-2 space-y-8">
              <div className="bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6">
                <h2 className="text-2xl font-semibold mb-4">
                  Create a New Thread
                </h2>
                <form onSubmit={handleSubmit} className="space-y-4">
                  <div>
                    <label
                      htmlFor="title"
                      className="block text-sm font-medium mb-1"
                    >
                      Thread Title
                    </label>
                    <input
                      type="text"
                      id="title"
                      value={title}
                      onChange={(e) => setTitle(e.target.value)}
                      required
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                    />
                  </div>
                  <div>
                    <label
                      htmlFor="prompt"
                      className="block text-sm font-medium mb-1"
                    >
                      AI Prompt (Optional)
                    </label>
                    <input
                      type="text"
                      id="prompt"
                      value={prompt}
                      onChange={(e) => setPrompt(e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                    />
                    <button
                      type="button"
                      onClick={handleAIGenerate}
                      className="flex items-center text-blue-500 mt-2 hover:text-blue-700 focus:outline-none"
                    >
                      <Sparkles className="w-5 h-5 mr-1" />
                      Generate Content
                    </button>
                  </div>
                  <div>
                    <label
                      htmlFor="category"
                      className="block text-sm font-medium mb-1"
                    >
                      Category
                    </label>
                    <select
                      id="category"
                      value={category}
                      onChange={(e) => setCategory(e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                    >
                      <option value="general">General</option>
                      <option value="visas">Visas</option>
                      <option value="jobs">Jobs</option>
                      <option value="permanent residency">
                        Permanent Residency
                      </option>
                      <option value="culture">Culture & Integration</option>
                    </select>
                  </div>
                  <div>
                    <label
                      htmlFor="content"
                      className="block text-sm font-medium mb-1"
                    >
                      Content
                    </label>
                    <textarea
                      id="content"
                      value={content}
                      onChange={(e) => setContent(e.target.value)}
                      required
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white h-32"
                    />
                  </div>
                  <button
                    type="submit"
                    disabled={loading}
                    className="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50"
                  >
                    {loading ? "Creating..." : "Create Thread"}
                  </button>
                </form>
              </div>
              <div className="bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6">
                <h2 className="text-2xl font-semibold  mb-4">
                  Recent Discussions
                </h2>
                <form onSubmit={handleSearchSubmit} className="mb-6">
                  <div className="flex">
                    <input
                      type="text"
                      value={searchTerm}
                      onChange={handleSearchChange}
                      placeholder="Search threads..."
                      className="flex-grow px-3 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                    />
                    <button
                      type="submit"
                      className="bg-blue-500 text-white px-4 py-2 rounded-r-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                    >
                      <Search className="w-5 h-5" />
                    </button>
                  </div>
                </form>

                {loading ? (
                  <p className="text-center">Loading...</p>
                ) : (
                  <ul className="space-y-6">
  {threads.map((thread) => (
    <li key={thread.id} className="bg-gray-50 dark:bg-gray-700 rounded-lg p-6 shadow">
      <div className="flex justify-between items-start mb-4">
        <div>
          <h3 className="text-xl font-semibold text-blue-600 dark:text-blue-400 mb-2">
            {thread.title}
          </h3>

          {/* Edit functionality */}
          {editingThreadId === thread.id ? (
            <form onSubmit={(e) => handleEditSubmit(e, thread.id)} className="mt-2">
              <textarea
                value={editedContent}
                onChange={(e) => setEditedContent(e.target.value)}
                className="w-full p-4 border-2 border-blue-500 rounded-md focus:outline-none focus:ring-4 focus:ring-blue-500 dark:bg-gray-700 dark:border-blue-400 dark:text-white"
                style={{ minHeight: "100px" }}
              />
              <div className="flex items-center mt-4 space-x-4">
                <button
                  type="submit"
                  className="bg-blue-500 text-white py-2 px-6 rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  Save
                </button>
                <button
                  type="button"
                  onClick={() => setEditingThreadId(null)}
                  className="bg-gray-300 text-black py-2 px-6 rounded-lg hover:bg-gray-400 focus:outline-none"
                >
                  Cancel
                </button>
              </div>
            </form>
          ) : (
            <p className="text-gray-600 dark:text-gray-300 mb-2">{thread.content}</p>
          )}

          <p className="text-sm text-gray-500 dark:text-gray-400">
            {format(new Date(thread.createdAt), "MMMM d, yyyy h:mm a")}
          </p>
          <div className="flex items-center text-sm text-gray-500 dark:text-gray-400">
            <Users className="w-4 h-4 mr-1" />
            <span className="mr-4">By {thread.User?.name || "Unknown"}</span>
            <Tag className="w-4 h-4 mr-1" />
            <span>{thread.category}</span>
          </div>
        </div>

        <div className="relative">
          {/* Add Edit button */}
          {thread.userId === userId && (
            <button
              onClick={() => {
                setEditingThreadId(thread.id);
                setEditedContent(thread.content);
              }}
              className="flex items-center text-gray-500 hover:text-blue-500"
            >
              Edit
            </button>
          )}
        </div>
      </div>

      {/* Like and Comment buttons */}
      <div className="flex items-center space-x-4 mb-4">
        <button
          className={`flex items-center ${
            likedThreads[thread.id] ? "text-blue-500" : "text-gray-500"
          } hover:text-blue-500`}
          onClick={() => handleLike(thread.id)}
          disabled={isLiking[thread.id]}
        >
          <ThumbsUp className="w-5 h-5 mr-1" />
          <span>{thread.likes}</span>
        </button>
        <button className="flex items-center text-gray-500 hover:text-blue-500">
          <MessageCircle className="w-5 h-5 mr-1" />
          <span>{thread.posts?.length || 0}</span>
        </button>
      </div>

      {/* Comments Section */}
      {thread.posts?.map((post) => (
        <div key={post.id} className="bg-white dark:bg-gray-600 p-4 rounded-lg mb-2">
          <div className="flex justify-between items-center">
            <p className="text-gray-700 dark:text-gray-300">{post.content}</p>
            <p className="text-sm text-gray-500 dark:text-gray-400">
              {format(new Date(post.createdAt), "MMMM d, yyyy h:mm a")}
            </p>
          </div>
        </div>
      ))}

      {/* Add Comment Form */}
      <form onSubmit={(e) => handleCommentSubmit(e, thread.id)} className="mt-4">
        <textarea
          value={commentTexts[thread.id] || ""}
          onChange={(e) => setCommentTexts({ ...commentTexts, [thread.id]: e.target.value })}
          placeholder="Add a comment..."
          className="w-full p-3 border-2 border-gray-300 rounded-md focus:outline-none focus:ring-4 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          style={{ minHeight: "80px" }}
        />
        <button
          type="submit"
          className="mt-2 bg-blue-500 text-white py-2 px-6 rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          Comment
        </button>
      </form>
    </li>
  ))}
</ul>

                )}
              </div>
            </div>
          </div>

          
        </div>
      </div>
    </RootLayout>
  );
};

export default CommunityPage;
